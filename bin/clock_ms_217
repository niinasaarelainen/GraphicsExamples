import java.io.FileWriter
import scala.io.Source
import scala.io.StdIn._
import scala.swing.Swing._
import scala.swing.{MainFrame, Panel, SimpleSwingApplication}
import scala.swing.event._
import scala.collection.mutable.Buffer
import scala.collection.mutable.Map
import scala.swing.BorderPanel
import scala.swing.Label
import scala.swing.TextField
import scala.swing.event.Key
import scala.swing.event.KeyPressed
import BorderPanel.Position._
import java.awt.{Color, Dimension, Graphics, Graphics2D, Point, geom, RenderingHints, Font}
import java.awt.event.{ActionListener, ActionEvent}
import javax.swing.{Timer => SwingTimer, AbstractAction} // for the Timer

object Clock_ms extends SimpleSwingApplication {
  
  var xCoordinate = 220
  var yCoordinate = 70
  
  var kirjoitettuNimi= ""
  
  lazy val ui = new Panel {
    var startOrStop = 1
    var ms, msEiNollata = 0
    var str, s, min = "00"
    background = Color.white
    preferredSize = (380, 590)
  
    
    override def paintComponent(g: Graphics2D) = {
      super.paintComponent(g)
      
      var double = (java.util.Calendar.getInstance().getTimeInMillis - ms )/10.0
    //  var str=  ((Math.ceil(double)- 14.0).toInt % 100).toString()
      
      
      //set antialiasing for shapes
      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                         RenderingHints.VALUE_ANTIALIAS_ON)
      // set antialiasing for text                   
      g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                         RenderingHints.VALUE_TEXT_ANTIALIAS_ON)
      
      g.setFont(new Font("Batang", Font.PLAIN, 72))
      g.setColor(Color.BLUE)
      g.drawString(min + ":" + s + ".", xCoordinate - 200, yCoordinate)
      g.setFont(new Font("Batang", Font.PLAIN, 52))
      g.drawString(str, xCoordinate, yCoordinate)
     
      var y = 160
     
      
      g.setFont(new Font("Batang", Font.PLAIN, 22))
      
      for (aika <- ajat.sorted){
        g.setColor(Color.RED)
        g.drawString(msNimiParit(aika.toString()), 10, y)
        
        g.setColor(Color.RED)
        g.drawString(nimiTulosParit(msNimiParit(aika.toString())), 200,y)
        y += 30
      }
      
      g.setColor(Color.WHITE)
      g.fillRect(190, 160, 200, 500)
        
      y = 160
       for (aika <- ajat.sorted){
        g.setColor(Color.RED)
        g.drawString(nimiTulosParit(msNimiParit(aika.toString())), 200,y)
        y += 30
      }
      ms += 1
      msEiNollata += 1
      if (ms < 10)
        str = "0" + ms
      else if (ms == 100) {ms=0; str = "0"; kasvataSekuntia() }
      else str = ms.toString()  
    }
    
   
    
    def kasvataSekuntia() = {
        var firstDigit = this.s.head.toInt -48
        println(this.s.last.toInt - 48)
        if(firstDigit == 0 && this.s.last.toInt -48 < 9) this.s = "0" + (this.s.last.toInt - 47)
        else if(firstDigit == 0 && this.s.last.toInt -48 == 9) this.s =  (this.s.last.toInt - 47).toString()
        else if (this.s == "59") {this.s = "00"; this.min = "0" + (this.min.last.toInt - 47)}
        else this.s = (this.s.toInt +1).toString()  
    }
    
    val timer = new SwingTimer(10, new ActionListener() {
        override def actionPerformed(e: ActionEvent) {
          repaint()
        } 
    })
  }
  
  
  
  def top = new MainFrame {
    title = "Millisekuntikello"    
    val nimi:TextField = new TextField("")
   // nimi.columns=6
    contents= new BorderPanel (){
      add(nimi, North)
      add(ui, South)
    }
    
    listenTo(nimi.keys)
    reactions += {
      case KeyPressed(_, Key.Enter, _, _) =>  {kirjoitettuNimi = nimi.text  ; ui.timer.start }
      case KeyPressed(_, Key.Control, _, _) =>  {ui.timer.stop; talleta(); top10() } 
    }
  }
  
  
  
  def talleta() = {
    val kohdetiedosto = new FileWriter("tulokset", true)
   
    try {
       kohdetiedosto.append(kirjoitettuNimi+";")
       kohdetiedosto.append(ui.min + ":" + ui.s + "." + ui.str +";")
       kohdetiedosto.append(ui.msEiNollata +";\n")
    } finally {
       kohdetiedosto.close()
    }
  }
   
   
    var ajat = Buffer[Int]()
    var msNimiParit = Map[String,String]()
    var nimiTulosParit = Map[String,String]()
   
    
  def top10() = {
       
    val data = Source.fromFile("tulokset")  
    var inputFromFile = Buffer[String]()
    ajat = Buffer[Int]()
  //  msNimiParit = Map[String,String]()
    nimiTulosParit = Map[String,String]()
    
    try {
        for (rivi <- data.getLines) {
           inputFromFile += rivi.trim
        }
     } finally {
        data.close()
     }
     
     for (i <- 0 until inputFromFile.size){
        val kolmeDataa = inputFromFile(i).split(";")
        msNimiParit += kolmeDataa(2) -> kolmeDataa(0)  // msEiNollata -> nimi
        nimiTulosParit += kolmeDataa(0) -> kolmeDataa(1)  // msEiNollata -> nimi
        ajat += kolmeDataa(2).toInt
     }
     ui.repaint()
     
  }
  
}